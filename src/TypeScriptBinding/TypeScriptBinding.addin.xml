<ExtensionModel>

	<Runtime>
		<Import assembly="TypeScriptBinding.dll" />
		<Import assembly="Newtonsoft.Json.dll" />

		<!-- V8dotnet begin-->
		<Import assembly="V8.Net.dll" />
		<Import assembly="V8.Net.Proxy.Interface.dll" />
		<Import assembly="V8.Net.SharedTypes.dll" />

		<!-- dll map -->
		<Import file="V8.Net.Proxy.Interface.dll.config"/>

		<!-- V8dotnet Linux -->
		<Import file="liblinux/x64/libV8_Net_Proxy.so"/>
		<Import file="liblinux/x86/libV8_Net_Proxy.so"/>

		<!-- V8dotnet OSX -->
		<Import file="libosx/x86/libV8_Net_Proxy.dylib"/>

		<!-- V8dotnet Windows -->
		<Import file="V8_Net_Proxy.dll"/>

		<!-- V8dotnet end-->

		<Import file="Templates/TypeScript.EmptyFile.xft.xml"/>
		
		<Import file="Scripts/compile.js"/>
		<Import file="Scripts/completion.js"/>
		<Import file="Scripts/completionDetails.js"/>
		<Import file="Scripts/definition.js"/>
		<Import file="Scripts/lib.d.ts"/>
		<Import file="Scripts/main.js"/>
		<Import file="Scripts/navigation.js"/>
		<Import file="Scripts/references.js"/>
		<Import file="Scripts/signature.js"/>
		<Import file="Scripts/diagnostics.js"/>
		<Import file="Scripts/TypeScript-License.txt"/>
		<Import file="Scripts/typescriptServices.js"/>
	</Runtime>

	<Extension path="/MonoDevelop/Ide/StartupHandlers">
		<Class class="ICSharpCode.TypeScriptBinding.InitializeTypeScriptServiceStartupHandler" />
		<Class class="ICSharpCode.TypeScriptBinding.RegisterTypeScriptCompileOnBuildStartupHandler"/>
		<Class class="ICSharpCode.TypeScriptBinding.RegisterTypeScriptCompileOnSaveFileStartupHandler"/>
	</Extension>
	
	<Extension path="/MonoDevelop/Ide/FileTemplates">
		<FileTemplate
			id="TypeScript-Empty"
			file="Templates/TypeScript.EmptyFile.xft.xml"/>
	</Extension>
	
	<Extension path="/MonoDevelop/Ide/TextEditorExtensions">
		<Class
			fileExtensions=".ts"
			class="ICSharpCode.TypeScriptBinding.TypeScriptCodeCompletionTextEditorExtension" />
	</Extension>
	
	<Extension path="/MonoDevelop/Ide/Commands">
		<Command
			id="MonoDevelop.TypeScriptBinding.Commands.GotoDeclaration"
			defaultHandler="ICSharpCode.TypeScriptBinding.GoToTypeScriptDefinitionCommandHandler"
			_label="_Go to Declaration"
			shortcut="F12"
			macShortcut="Meta|D"/>
		<Command
			id="MonoDevelop.TypeScriptBinding.Commands.FindReferences"
			defaultHandler="ICSharpCode.TypeScriptBinding.FindTypeScriptReferencesCommandHandler"
			_label="_Find References"
			shortcut="Shift|F12"
			macShortcut="Shift|Meta|R"/>
		<Command
			id="MonoDevelop.TypeScriptBinding.Commands.Rename"
			defaultHandler="ICSharpCode.TypeScriptBinding.RenameTypeScriptReferenceCommandHandler"
			_label="Re_name"
			_description="Rename the selection"
			shortcut="F2"
			macShortcut="Meta|R"/>
	</Extension>
	
	<Extension path="/MonoDevelop/SourceEditor2/ContextMenu/Editor">
		<Condition id="FileType" fileExtensions=".ts">
			<CommandItem
				id="MonoDevelop.TypeScriptBinding.Commands.GotoDeclaration"
				insertafter="MonoDevelop.SourceEditor.SourceEditorCommands.MarkerOperations" />
			<CommandItem
				id="MonoDevelop.TypeScriptBinding.Commands.FindReferences"
				insertafter="MonoDevelop.TypeScriptBinding.Commands.GotoDeclaration" />
			<CommandItem
				id="MonoDevelop.TypeScriptBinding.Commands.Rename"
				insertafter="MonoDevelop.TypeScriptBinding.Commands.FindReferences" />
		</Condition>
	</Extension>
	
	<Extension path="/MonoDevelop/ProjectModel/Gui/ItemOptionPanels/Build">
		<Condition id="ItemType" value="Project">
			<Section
				id="TypeScriptProjectOptions"
				_label="TypeScript"
				fill="true"
				class="ICSharpCode.TypeScriptBinding.TypeScriptProjectOptionsPanel"/>
		</Condition>
	</Extension>
	
	<Extension name="/MonoDevelop/ProjectModel/LanguageBindings">
		<LanguageBinding
			id="TypeScript"
			class="ICSharpCode.TypeScriptBinding.TypeScriptLanguageBinding"
			supportedextensions=".ts"/>
	</Extension>

	<Extension path="/MonoDevelop/TypeSystem/Parser">
		<Parser
			id="TypeScriptParser"
			class="ICSharpCode.TypeScriptBinding.TypeScriptParser"
			mimeType="text/typescript, application/typescript"/>
	</Extension>
</ExtensionModel>
